plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '5.14.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "1.2.1"
    id 'io.github.juuxel.loom-quiltflower-mini' version '1.2.1'
}

apply plugin: 'java-library'

version = System.getenv("MI_VERSION")
        ? System.getenv("MI_VERSION")
        : "local"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    // for KJS
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    // for ARRP
    maven {
        url = 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/'
        content {
            includeGroup "net.devtech"
        }
    }
    // for Patchouli
    maven {
        url 'https://maven.blamejared.com'
    }
    // for WTHIT
    maven {
        url 'https://maven.bai.lol'
    }
    // for AE2
    maven {
        name "Modmaven"
        url "https://modmaven.dev"
        content {
            includeGroup "appeng"
        }
    }
    maven {
        url "https://maven.shedaniel.me"
        content {
            includeGroup "me.shedaniel.cloth.api"
            includeGroup "me.sargunvohra.mcmods"
            includeGroup "me.shedaniel.cloth"
            includeGroup "me.shedaniel"
            includeGroup "dev.architectury"
        }
    }
    maven {
        url "https://maven.terraformersmc.com"
        content {
            includeGroup "com.terraformersmc"
        }
    }
    // for DashLoader
    maven {
        name "DashLoader"
        url 'https://maven.oskarstrom.net'
        content {
            includeGroup "net.oskarstrom"
        }
    }
    maven {
        name 'Jitpack for MI'
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.KubeJS-Mods"
            includeGroup "com.github.GabrielOlvH"
            /* For Magna */
            includeGroup "com.github.Draylar"
            includeGroup "com.github.Draylar.omega-config"
        }
    }
    // to build indrev
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
        content {
            includeGroup "io.github.cottonmc"
        }
    }
    maven {
        name = "dblsaiko"
        url = "https://maven.dblsaiko.net/"
    }
    maven {
        name = "Technici4n"
        url = "https://raw.githubusercontent.com/Technici4n/Technici4n-maven/master/"
        content {
            includeGroup "net.fabricmc.fabric-api"
            includeGroup "dev.technici4n"
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.ftb.mods"
        }
    }
    // for reach entity attributes, required by Magna
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    // for PlayerAbilityLib
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroupByRegex 'io\\.github\\.onyxstudios.*'
        }
    }
    maven {
        url "https://maven.parchmentmc.net/"
        content {
            includeGroup "org.parchmentmc.data"
        }
    }
    mavenLocal()

}

dependencies {
    // TODO remove when fabric PR is merged
    modImplementation("net.fabricmc.fabric-api:fabric-data-generation-api-v1:1.1.0+abf02f7665") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include modImplementation("net.fabricmc.fabric-api:fabric-resource-conditions-api-v1:1.0.0+abf02f7665") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include modImplementation("net.fabricmc.fabric-api:fabric-tool-attribute-api-v1:1.4.0-modified-technici4n+ea42e1b365") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.1:2021.12.19@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Dependencies
    include modImplementation("net.devtech:arrp:${project.arrp_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include modImplementation("vazkii.patchouli:Patchouli:${project.patchouli_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include modApi("me.shedaniel.cloth.api:cloth-armor-api-v1:${project.cloth_api_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include modApi("me.shedaniel.cloth.api:cloth-common-events-v1:${project.cloth_api_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("mcp.mobius.waila:wthit:fabric-${project.wthit_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("dev.latvian.mods:kubejs-fabric:1800.4.0-build.235") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include modImplementation("com.github.Draylar:magna:${project.magna_version}") {
        exclude(group: "io.github.prospector")
        exclude(group: "me.shedaniel.cloth")
        exclude(group: "net.fabricmc.fabric-api")
    }

    include modApi("teamreborn:energy:${project.tr_energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include modImplementation("io.github.ladysnake:PlayerAbilityLib:${project.pal_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("lol.bai.megane:megane-api:${project.megane_api_version}")

    modRuntimeOnly("lol.bai.megane:megane-runtime:${project.megane_runtime_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "mcp.mobius.waila")
    }

    modRuntimeOnly("lol.bai.megane:megane-vanilla:${project.megane_vanilla_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "mcp.mobius.waila")
    }

    modCompileOnly('net.oskarstrom:DashLoader:2.1-dev4') {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

loom {
    accessWidenerPath = file("src/main/resources/modern_industrialization.accesswidener")
    runs {
        autoTestServer {
            server()
            name = "Autotest Server"
            vmArg "-Dmodern_industrialization.autoTest"

            ideConfigGenerated = true
            source sourceSets.main
        }
        datagenClient {
            client()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"

            ideConfigGenerated = true
            runDir "build/datagen"
            source sourceSets.main
        }
    }
}

sourceSets {
    main {
        java {
            srcDir "src/main"
            exclude "**/compat/dashloader/**"
        }
        resources {
            srcDir "src/generated/resources"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 17
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        importOrder()

        removeUnusedImports()

        eclipse().configFile('eclipse-format.xml')

        indentWithSpaces()
        endWithNewline()
        licenseHeaderFile 'LICENSE.java'
    }
    format 'json', {
        target 'src/**/lang/*.json'
        addStep(JsonOrderStep.create())
    }
}

import com.diffplug.spotless.FormatterFunc
import com.diffplug.spotless.FormatterStep
import com.google.gson.Gson
import com.google.gson.GsonBuilder

final class JsonOrderStep {
    private JsonOrderStep() {}
    private static final Gson GSON = new GsonBuilder().disableHtmlEscaping().setLenient().setPrettyPrinting().create();

    static FormatterStep create() {
        return FormatterStep.create(
                'jsonOrderStep',
                new State(),
                {
                    new FormatterFunc() {
                        String apply(String input) {
                            TreeMap<String, Object> jsonMap = GSON.fromJson(input, TreeMap.class);
                            String sortedJson = GSON.toJson(jsonMap);
                            String prettyPrinted = sortedJson.replace('  "', '    "').replace('\\u0027', '\'');
                            return prettyPrinted + "\n";
                        }
                    }
                },
        );
    }

    private static final class State implements Serializable {
        private static final long serialVersionUID = 1L;

        private final int formatVersion = 1;
    }
}

def releaseChannel = "release"
def changelog = "Please visit our github repository for a changelog: https://github.com/AztechMC/Modern-Industrialization/releases."
if (version.toLowerCase().contains("alpha")) {
    releaseChannel = "alpha"
    changelog = "THIS IS AN ALPHA RELEASE, MAKE A BACKUP BEFORE INSTALLING AND FREQUENTLY WHILE PLAYING, AND PLEASE REPORT ANY ISSUE YOU MAY FIND ON OUR ISSUE TRACKER.\n\n" + changelog
} else if (version.toLowerCase().contains("beta")) {
    releaseChannel = "beta"
    changelog = "This is a beta release. It is expected to be mostly stable, but in any case please report any issue you may find.\n\n" + changelog
}

// Publishing
if (System.getenv("CURSEFORGE_API_KEY") && !version.endsWith("-SNAPSHOT")) {
    curseforge {
        apiKey = System.getenv().get("CURSEFORGE_API_KEY")
        project {
            id = project.curseforge_project
            releaseType = releaseChannel
            changelogType = "markdown"
            delegate.changelog = changelog

            addGameVersion "1.18"
            addGameVersion "1.18.1"
            addGameVersion "Fabric"
            addGameVersion "Java 17"

            relations {
                requiredDependency "fabric-api"
                requiredDependency "roughly-enough-items"
                optionalDependency "wthit"
                optionalDependency "megane"
                embeddedLibrary "auto-config-updated-api"
                embeddedLibrary "patchouli-fabric"
            }
            mainArtifact(remapJar.archiveFile) {
                displayName = "Modern Industrialization v${version}"
            }
        }
        options {
            forgeGradleIntegration = false
        }
        afterEvaluate {
            tasks.getByName("curseforge${project.curseforge_project}").dependsOn remapJar
        }
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth (type: TaskModrinthUpload){
    onlyIf {
        System.getenv("MODRINTH_API_KEY") && !version.endsWith("-SNAPSHOT")
    }
    token = System.getenv("MODRINTH_API_KEY")
    projectId = project.modrinth_project
    versionNumber = version
    versionName = "Modern Industrialization v${version}"
    delegate.changelog = changelog
    versionType = releaseChannel.toUpperCase()
    uploadFile = remapJar.archiveFile
    addGameVersion "1.18"
    addGameVersion "1.18.1"
    addLoader "fabric"
}
