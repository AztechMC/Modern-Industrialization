plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id 'maven'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '5.10.2'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = System.getenv("MI_VERSION")
        ? System.getenv("MI_VERSION")
        : "local"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    // for KJS
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    // for ARRP
    maven {
        url = 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/'
        content {
            includeGroup "net.devtech"
        }
    }
    // for Cardinal Components
    maven {
        name = "Ladysnake Mods"
        url = "https://ladysnake.jfrog.io/artifactory/mods"
        content {
            includeGroup "io.github.onyxstudios"
            includeGroup "io.github.onyxstudios.Cardinal-Components-API"
        }
    }
    // for Patchouli
    maven {
        url 'https://maven.blamejared.com'
        content {
            includeGroup "vazkii.patchouli"
        }
    }
    // for LBA
    maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
        content {
            includeGroup "alexiil.mc.lib"
        }
    }
    // for HWYLA
    maven {
        url "https://maven.tehnut.info"
        content {
            includeGroup "mcp.mobius.waila"
        }
    }
    // for AE2
    maven {
        name "Modmaven"
        url "https://modmaven.dev"
        content {
            includeGroup "appeng"
        }
    }
    maven {
        url "https://maven.shedaniel.me"
        content {
            includeGroup "me.shedaniel.cloth.api"
            includeGroup "me.sargunvohra.mcmods"
            includeGroup "me.shedaniel.cloth"
            includeGroup "me.shedaniel"
        }
    }
    maven {
        url "https://maven.terraformersmc.com"
        content {
            includeGroup "com.terraformersmc"
        }
    }
    // for Astromine, KJS and Indrev, and api-provider
    maven {
        name 'Jitpack for MI'
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.KubeJS-Mods"
            includeGroup "com.github.Mixinors.Astromine"
            includeGroup "com.github.GabrielOlvH"
            includeGroup "com.github.Technici4n"
            /* To build indrev */
            includeGroup "com.github.Draylar"
            /* To build astromine */
            includeGroup "com.github.vini2003"
            includeGroup "com.github.Shnupbups"
        }
    }
    // to build indrev
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
        content {
            includeGroup "io.github.cottonmc"
        }
    }
    // to build Astromine
    maven {
        name = "Earthcomputer"
        url = "https://dl.bintray.com/earthcomputer/mods"
        content {
            includeGroup "net.earthcomputer"
        }
    }
    maven {
        name = "Wrenchable"
        url = "https://dl.bintray.com/zundrel/wrenchable"
        content {
            includeGroup "com.zundrel"
        }
    }
    maven {
        name = "dblsaiko"
        url = "https://maven.dblsaiko.net/"
    }
    maven {
        name = "Technici4n"
        url = "https://raw.githubusercontent.com/Technici4n/Technici4n-maven/master/"
        content {
            includeGroup "net.fabricmc.fabric-api"
            includeGroup "dev.technici4n"
        }
    }
    // for reach entity attributes, required by Magna
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    mavenLocal()
}

dependencies {
    // Experimental fluid API
    include modImplementation("net.fabricmc.fabric-api:fabric-transfer-api-v1:0.1.0+7678d00a7d")
    // Experimental API API with item support
    include modImplementation("net.fabricmc.fabric-api:fabric-api-lookup-api-v1:1.2.0+84310a227d")
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Dependencies
    modImplementation "net.devtech:arrp:${project.arrp_version}"
    include "net.devtech:arrp:${project.arrp_version}"
    modImplementation "io.github.onyxstudios:Cardinal-Components-API:${project.cardinal_components_version}"
    include "io.github.onyxstudios:Cardinal-Components-API:${project.cardinal_components_version}"
    modImplementation "me.shedaniel:RoughlyEnoughItems:${project.rei_version}"
    modImplementation "vazkii.patchouli:Patchouli:${project.patchouli_version}"
    include "vazkii.patchouli:Patchouli:${project.patchouli_version}"
    modApi "me.shedaniel.cloth.api:cloth-armor-api-v1:${project.cloth_api_version}"
    modApi "me.shedaniel.cloth.api:cloth-common-events-v1:${project.cloth_api_version}"
    modApi "me.shedaniel.cloth.api:cloth-durability-bar-api-v1:${project.cloth_api_version}"
    include "me.shedaniel.cloth.api:cloth-armor-api-v1:${project.cloth_api_version}"
    include "me.shedaniel.cloth.api:cloth-common-events-v1:${project.cloth_api_version}"
    include "me.shedaniel.cloth.api:cloth-durability-bar-api-v1:${project.cloth_api_version}"
    modImplementation "mcp.mobius.waila:Hwyla:${project.hwyla_version}"
    modImplementation "me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}"
    include "me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}"
    modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
    modImplementation "curse.maven:kubejs-395864:${project.kubejs_file}"
    modImplementation "curse.maven:architectury-fabric-419697:${project.architectury_file}"
    modRuntime "curse.maven:rhino-416294:${project.rhino_file}"
    include modImplementation("com.github.Draylar:magna:${project.magna_version}") {
        exclude(group: "io.github.prospector")
        exclude(group: "me.shedaniel.cloth")
    }

    include modImplementation("alexiil.mc.lib:libblockattributes-all:0.8.8")

    include modApi("dev.technici4n:FastTransferLib:${project.ftl_version}")

    // Other mods for testing purposes
    //modRuntime "appeng:appliedenergistics2-fabric:${project.appeng_version}"
    //modRuntime "com.github.Mixinors.Astromine:astromine:${project.astromine_commit}"
    //modRuntime ("com.github.GabrielOlvH:Industrial-Revolution:${project.indrev_commit}") {
    //    exclude group: "teamreborn", module: "energy"
    //}
}

minecraft {
    accessWidener = file("src/main/resources/modern_industrialization.accesswidener")
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        targetExclude '**/MIFluids.java', '**/MIMaterials.java', '**/MIOreGenerators.java', '**/MITags.java'
        targetExclude '**/MIMachineRecipeTypes.java', '**/SingleBlockCraftingMachines.java', '**/MultiblockMachines.java'

        importOrder()

        removeUnusedImports()

        eclipse().configFile('eclipse-format.xml')

        indentWithSpaces()
        endWithNewline()
        licenseHeaderFile 'LICENSE.java'
    }
    format 'json', {
        target 'src/**/lang/*.json'
        addStep(JsonOrderStep.create())
    }
}

import com.diffplug.spotless.FormatterStep
import com.google.gson.Gson
import com.google.gson.GsonBuilder

final class JsonOrderStep {
    private JsonOrderStep() {}
    private static final Gson GSON = new GsonBuilder().setLenient().setPrettyPrinting().create();

    static FormatterStep create() {
        return FormatterStep.createNeverUpToDate(
                'jsonOrderStep',
                { String inputString ->
                    TreeMap<String, Object> jsonMap = GSON.fromJson(inputString, TreeMap.class);
                    String sortedJson = GSON.toJson(jsonMap);
                    String prettyPrinted = sortedJson.replace('  "', '    "').replace('\\u0027', '\'');
                    return prettyPrinted;
                },
        );
    }
}

def releaseChannel = "beta"
def changelog = "Please visit our github repository for a changelog: https://github.com/AztechMC/Modern-Industrialization/releases."
if (version.toLowerCase().contains("alpha")) {
    releaseChannel = "alpha"
    changelog = "THIS IS AN ALPHA RELEASE, MAKE A BACKUP BEFORE INSTALLING AND FREQUENTLY WHILE PLAYING, AND PLEASE REPORT ANY ISSUE YOU MAY FIND ON OUR ISSUE TRACKER.\n\n" + changelog
}

// Publishing
if (System.getenv("CURSEFORGE_API_KEY") && !version.endsWith("-SNAPSHOT")) {
    curseforge {
        apiKey = System.getenv().get("CURSEFORGE_API_KEY")
        project {
            id = project.curseforge_project
            releaseType = releaseChannel
            changelogType = "markdown"
            delegate.changelog = changelog

            addGameVersion "1.16.2"
            addGameVersion "1.16.3"
            addGameVersion "1.16.4"
            addGameVersion "1.16.5"
            addGameVersion "Fabric"
            addGameVersion "Java 8"

            relations {
                requiredDependency "fabric-api"
                optionalDependency "wthit"
                optionalDependency "roughly-enough-items"
                embeddedLibrary "libblockattributes"
                embeddedLibrary "cardinal-components"
                embeddedLibrary "auto-config-updated-api"
                embeddedLibrary "patchouli-fabric"
            }
            mainArtifact(remapJar.archiveFile) {
                displayName = "Modern Industrialization v${version}"
            }
        }
        options {
            forgeGradleIntegration = false
        }
        afterEvaluate {
            tasks.getByName("curseforge${project.curseforge_project}").dependsOn remapJar
        }
    }
}
